var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GraphOptInterface","category":"page"},{"location":"#GraphOptInterface","page":"Home","title":"GraphOptInterface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GraphOptInterface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GraphOptInterface]","category":"page"},{"location":"#GraphOptInterface.AbstractGraphOptimizer","page":"Home","title":"GraphOptInterface.AbstractGraphOptimizer","text":"AbstractGraphOptimizer\n\nAbstract supertype for block-structure-exploiting optimizers.\n\n\n\n\n\n","category":"type"},{"location":"#GraphOptInterface.BipartiteGraph","page":"Home","title":"GraphOptInterface.BipartiteGraph","text":"BipartiteGraph\n\nA simple bipartite graph.  Contains two vertex sets to enforce bipartite structure.\n\n\n\n\n\n","category":"type"},{"location":"#GraphOptInterface.Edge","page":"Home","title":"GraphOptInterface.Edge","text":"Edge\n\nAn edge represents different types of coupling. For instance an Edge{Tuple{Node}} is an edge the couple variables within a single node. An Edge{Tuple{N,Node}} couple variables across one or more nodes.\n\n\n\n\n\n","category":"type"},{"location":"#GraphOptInterface.HyperGraph","page":"Home","title":"GraphOptInterface.HyperGraph","text":"HyperGraph\n\nA very simple hypergraph type.  Contains attributes for vertices and hyperedges.\n\n\n\n\n\n","category":"type"},{"location":"#GraphOptInterface.HyperMap","page":"Home","title":"GraphOptInterface.HyperMap","text":"HyperMap\n\nA mapping from an OptiGraph to a graph view that supports various graph query functions. Currently supports a HyperGraph as the graph view.\n\n\n\n\n\n","category":"type"},{"location":"#GraphOptInterface.Node","page":"Home","title":"GraphOptInterface.Node","text":"Node\n\nA node represents a set of variables and associated attributes. \n\n\n\n\n\n","category":"type"},{"location":"#GraphOptInterface.add_edge-Union{Tuple{N}, Tuple{GraphOptInterface.OptiGraph, Tuple{Vararg{GraphOptInterface.Node, N}}}} where N","page":"Home","title":"GraphOptInterface.add_edge","text":"add_edge(graph::OptiGraph, nodes::NTuple{N,Node})::Edge where N\n\nAdd an edge to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.add_node-Tuple{GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.add_node","text":"add_node(graph::OptiGraph)::Node\n\nAdd a node to graph. The index of the node is determined by the central graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.add_subgraph-Tuple{GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.add_subgraph","text":"add_subgraph(graph::OptiGraph)\n\nAdd a new subgraph to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.all_incident_edges-Tuple{GraphOptInterface.HyperMap, Vector{GraphOptInterface.Node}}","page":"Home","title":"GraphOptInterface.all_incident_edges","text":"all_incident_edges(hyper_map::HyperMap, nodes::Vector{Node})::Vector{Edge}\n\nReturn all of the edges within the optigraph in hyper_map that are incident  to the vector of supplied nodes.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.all_neighbors-Tuple{GraphOptInterface.HyperMap, Vector{GraphOptInterface.Node}}","page":"Home","title":"GraphOptInterface.all_neighbors","text":"all_neighbors(hyper_map::HyperMap, nodes::Vector{Node})::Vector{Node}\n\nReturn the neighbor nodes within the optigraph in hyper_map to the vector of supplied  optigraph nodes.  \n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.children_incident_edges-Tuple{GraphOptInterface.HyperMap, GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.children_incident_edges","text":"children_incident_edges(hyper_map::HyperMap, graph::OptiGraph)::Vector{Edge}\n\nReturn all of the optigraph edges that are incident to the supplied graph that are  strictly child connections.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.get_mapped_nodes-Tuple{GraphOptInterface.HyperMap, Vector{GraphOptInterface.Node}}","page":"Home","title":"GraphOptInterface.get_mapped_nodes","text":"get_mapped_nodes(hyper_map::HyperMap, nodes::Vector{Node})\n\nGet the hypernode elements that correspond to the supplied optigraph nodes.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.identify_edges-Tuple{GraphOptInterface.HyperGraph, Vector{Vector{Int64}}}","page":"Home","title":"GraphOptInterface.identify_edges","text":"identify_edges(hypergraph::HyperGraph,partitions::Vector{Vector{HyperNode}})\n\nIdentify both induced partition edges and cut edges given a partition of HyperNode vectors.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.identify_nodes-Tuple{GraphOptInterface.HyperGraph, Vector{Vector{GraphOptInterface.HyperEdge}}}","page":"Home","title":"GraphOptInterface.identify_nodes","text":"identify_nodes(hypergraph::HyperGraph,partitions::Vector{Vector{HyperEdge}})\n\nIdentify both induced partition nodes and cut nodes given a partition of HyperEdge vectors.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.incident_edges-Tuple{GraphOptInterface.HyperGraph, Int64}","page":"Home","title":"GraphOptInterface.incident_edges","text":"incident_edges(hypergraph::HyperGraph,hypernode::HyperNode)\n\nIdentify the incident hyperedges to a HyperNode.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.incident_edges-Tuple{GraphOptInterface.HyperGraph, Vector{Int64}}","page":"Home","title":"GraphOptInterface.incident_edges","text":"incident_edges(hypergraph::HyperGraph,hypernodes::Vector{HyperNode})\n\nIdentify the incident hyperedges to a vector of HyperNodes.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.induced_edges-Tuple{GraphOptInterface.HyperGraph, Vector{Int64}}","page":"Home","title":"GraphOptInterface.induced_edges","text":"induced_edges(hypergraph::HyperGraph,hypernodes::Vector{HyperNode})\n\nIdentify the induced hyperedges to a vector of HyperNodes.\n\nNOTE: This currently does not support hypergraphs with unconnected nodes\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.neighborhood-Tuple{GraphOptInterface.HyperGraph, Vector{Int64}, Int64}","page":"Home","title":"GraphOptInterface.neighborhood","text":"neighborhood(g::HyperGraph,nodes::Vector{OptiNode},distance::Int64)\n\nRetrieve the neighborhood within distance of nodes.  Returns a vector of the original vertices and added vertices\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.node_variables-Tuple{GraphOptInterface.Edge}","page":"Home","title":"GraphOptInterface.node_variables","text":"node_variables(edge::Edge)::Vector{Tuple{Node,MOI.VariableIndex}}\n\nReturn a vector of tuples where each tuple contains the node and variable index associated with each edge variable.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.non_parent_incident_edges-Tuple{GraphOptInterface.HyperMap, GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.non_parent_incident_edges","text":"non_parent_incident_edges(hyper_map::HyperMap, subgraph::OptiGraph)::Vector{Edge}\n\nReturn all of the optigraph edges that are incident to the supplied subgraph that  are strictly not parent connections.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.non_parent_neighbors-Tuple{GraphOptInterface.HyperMap, GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.non_parent_neighbors","text":"non_parent_neighbors(hyper_map::HyperMap, subgraph::OptiGraph)::Vector{Node}\n\nReturn the neighbor nodes in subgraph based on the optigraph in hyper_map that are not  in the parent graph of `subgraph. \n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.parent_incident_edges-Tuple{GraphOptInterface.HyperMap, GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.parent_incident_edges","text":"parent_incident_edges(hyper_map::HyperMap, subgraph::OptiGraph)::Vector{Edge}\n\nReturn all of the optigraph edges that are incident to the supplied subgraph that  are strictly parent connections.\n\n\n\n\n\n","category":"method"},{"location":"#GraphOptInterface.parent_neighbors-Tuple{GraphOptInterface.HyperMap, GraphOptInterface.OptiGraph}","page":"Home","title":"GraphOptInterface.parent_neighbors","text":"parent_neighbors(hyper_map::HyperMap, subgraph::OptiGraph)::Vector{Node}\n\nReturn the neighbor nodes in subgraph based on the optigraph in hyper_map that are only in the parent graph of `subgraph. \n\n\n\n\n\n","category":"method"},{"location":"#Graphs.LinAlg.adjacency_matrix-Tuple{GraphOptInterface.HyperGraph}","page":"Home","title":"Graphs.LinAlg.adjacency_matrix","text":"Graphs.adjacency_matrix(hypergraph::HyperGraph)\n\nObtain the adjacency matrix from hypergraph. Returns a sparse matrix.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.LinAlg.incidence_matrix-Tuple{GraphOptInterface.HyperGraph}","page":"Home","title":"Graphs.LinAlg.incidence_matrix","text":"Graphs.incidence_matrix(hypergraph::HyperGraph)\n\nObtain the incidence matrix representation of hypergraph.  Rows correspond to vertices. Columns correspond to hyperedges. Returns a sparse matrix.\n\n\n\n\n\n","category":"method"}]
}
